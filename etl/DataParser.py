from bs4 import BeautifulSoup
import pandas as pd
pd.options.mode.chained_assignment = None # Cancel false positive warnings
import os
import numpy as np
import json
import re
import math


class DataParser:
    def __init__(self):
        pass

    ### Amenities Data Transformation Functions
    def parse_kml(self, filename) -> pd.DataFrame:
        """For hawkercenters, supermarkets, kindergartens, gyms, park facilities, Retailpharmacylocations
        These have <Point> child of <Placemark> element.
        For MRTLine, <LineString> child with start and end
        For parking lot, coordinates of edges

        Args:
            filename (string): kml file name

        Returns:
            pd.DataFrame: kml data parsed into dataframe with longitude latitude, usually altitude contains all 0
        """
        with open(filename, 'r') as f:
            s = BeautifulSoup(f, 'xml')
            placemarks = s.find_all(str("Placemark"))

            data_dict = {}
            for placemark in placemarks:
                # extract placemark name or id
                placemark_id = placemark.find('name').text if placemark.find('name') else placemark['id']
                data_dict[placemark_id] = {}
                # extract table dataa
                simple_data = placemark.find_all('SimpleData')
                for sd in simple_data:    
                    data_dict[placemark_id].update({sd['name']: sd.text})                
                if placemark.Point:
                    coor = placemark.find('Point').coordinates.text.split(',', 2)
                    # https://developers.google.com/kml/documentation/kml_tut
                    longitude, latitude, altitude = map(float, coor)                    
                    data_dict[placemark_id].update({'Longitude': longitude, 'Latitude': latitude, 'Altitude': altitude})
                
                elif placemark.LineString:
                    # start, end = placemark.LineString.coordinates.text.split(' ')
                    # some has more than 2 for a line
                    coor = placemark.find('LineString').coordinates.text
                    data_dict[placemark_id].update({'coordinates': coor})

                elif placemark.Polygon:
                    coor = placemark.find('Polygon').outerBoundaryIs.LinearRing.coordinates.text
                    data_dict[placemark_id].update({'coordinates': coor})
                
                else:
                    print('check kml schema')

            df = pd.DataFrame(data_dict).T.reset_index().rename(columns={'index': filename.split(".")[0]})

            # testing
            # print(df.head())
            # print(df['coordinates'].apply(len).nunique())

        print("Retrieve success: {filename}".format(filename = filename))
        return df


    def parse_carpark(self, filename):
        with open(filename, 'r') as f:
            s = BeautifulSoup(f, 'xml')
            placemarks = s.find_all(str("Placemark"))

            data_dict = {}
            for placemark in placemarks:
                placemark_id = placemark.find('name').text if placemark.find('name') else placemark['id']
                data_dict[placemark_id] = {}
                simple_data = placemark.find_all('SimpleData')
                for sd in simple_data:    
                    data_dict[placemark_id].update({sd['name']: sd.text})
                
                # Pentagon example is generated by drawing simple inner and outer shells and then extruding them down to the ground
                coor = placemark.find('Polygon').outerBoundaryIs.LinearRing.coordinates.text
                # TODO insert martin's code on finding middle pt
                    
            df = pd.DataFrame(data_dict).T.reset_index().rename(columns={'index': 'Parking Lot'})
            # testing
            print(df.head())

        return df
        
    def _extract_data(self):
        hawkers = self.parse_kml('HawkerCentresKML.kml')
        pharmacies = self.parse_kml('RetailpharmacylocationsKML.kml')
        # mrt_stations = kml.parse_kml('MasterPlan2003MRTLine.kml')
        gyms = self.parse_kml('GymsSGKML.kml')
        kindergartens = self.parse_kml('Kindergartens.kml')
        carparks = self.parse_kml('URAParkingLotKML.kml')
        parks = self.parse_kml('ParkFacilitiesKML.kml')
        mrt_stations = pd.read_csv('mrt_lrt_data.csv')
    
        combined_dict = {
            'Hawker': hawkers,
            'Pharmacy': pharmacies,
            'Gym': gyms,
            'Kindergarten': kindergartens,
            'Mrt Station': mrt_stations,
            'Carpark': carparks,
            'Park': parks
        }
        return combined_dict
    
    def _rename_lat_long_cols(self, data_dict):
        data_dict['Mrt Station'] = data_dict['Mrt Station'].rename(columns={'lat':'Latitude', 'lng': 'Longitude'})
        for key, df in data_dict.items():
            df.rename(columns={"Latitude": "lat", "Longitude": "long"}, inplace=True)
        return data_dict
    
    def _add_amenity_type(self, data_dict):
        for amenity_name, amenity_df in data_dict.items():
            print("Amenity type added: {amenity_name}".format(amenity_name = amenity_name))
            data_dict[amenity_name]['Amenity_type'] = amenity_name
        return data_dict
    
    def _add_mid_pt(self, amenity_dict):
        def calculate_mid_pt(df, coords_col):
            def get_avg(lst):
                return sum(lst) / len(lst)
                
            coords_srs = df[coords_col]
            avg_lat_list = []
            avg_long_list = []
            avg_alt_list = []
            counter = 0
            for coords_str in coords_srs:
                try:
                    coord_list = re.split(',| ', coords_str)
                    coord_list = [float(value) for value in coord_list]
                    lat_list = coord_list[1::3]
                    long_list = coord_list[0::3]
                    alt_list = coord_list[2::3]
            
                    avg_lat_list.append(get_avg(lat_list))
                    avg_long_list.append(get_avg(long_list))
                    avg_alt_list.append(get_avg(alt_list))
                    counter += 1
                except:
                    avg_lat_list.append(pd.NA)
                    avg_long_list.append(pd.NA)
                    avg_alt_list.append(pd.NA)
            df['Latitude'] = avg_lat_list
            df['Longitude'] = avg_long_list
            df['Altitude'] = avg_alt_list
            df = df.drop(columns=coords_col)
            return df
            
        for amenity_name, amenity_df in amenity_dict.items():
            try:
                amenity_dict[amenity_name] = calculate_mid_pt(amenity_df, 'coordinates')
                print("Midpoint success: {amenity_name}".format(amenity_name = amenity_name))
            except Exception as e:
                continue
        return amenity_dict
    
    def _save_individual_df(self, data_dict, folder_path):
        for name, df in data_dict.items():
            file_path = "{folder_path}/{name}.csv".format(folder_path=folder_path, name=name)
            df.to_csv(file_path, index=False)
        print("Data saved in {file_path}".format(file_path=file_path))
    
    def _combine_dict_to_df(self, combined_dict, common_cols):
        df_list = []
        common_cols = ["Amenity_type", "lat", "long"] # "Latitude", "Longitude"
        for key, df in combined_dict.items():
            df_common_cols = df[common_cols]
            df_list.append(df_common_cols)
            combined_df = pd.concat(df_list, ignore_index=True)
        # combined_df = combined_df.reset_index().rename(columns={'index':'Amenity_id'})
        return combined_df
    
    def amenity_data_transformation_pipeline(self, out_folder_path):
        amenity_dict = self._extract_data()
        amenity_dict = self._add_amenity_type(amenity_dict)
        amenity_dict = self._add_mid_pt(amenity_dict)
        amenity_dict = self._rename_lat_long_cols(amenity_dict)
    
        # Save individual transformed amenities
        self._save_individual_df(amenity_dict, out_folder_path)
    
        # Combine all amenities into one dataframe and save
        common_cols = ["Amenity_type", "lat", "long"]
        combined_df = self._combine_dict_to_df(amenity_dict, common_cols)
        file_path = "{folder_path}/Combined_amenities.csv".format(folder_path=out_folder_path)
        combined_df.to_csv(file_path)
        return combined_df
    
    ### HDB Data Transformation Functions
    def parse_hdb(self, file_path) -> pd.DataFrame:
        
        """parse hdb resale data

        Args:
            file_path: hdb dataset file path

        Returns:
            dataframe: cleaned data with specified columns in db
        """
        with open(file_path) as file:
            hdb_dict = json.load(file)['Result']
        hdb_df = pd.json_normalize(hdb_dict)
         # drop rows with NA long / lat / planning_area
        hdb_df = hdb_df[~hdb_df.long.str.contains("NA")]
        hdb_df = hdb_df[~hdb_df.lat.str.contains("NA")]
        hdb_df = hdb_df[~hdb_df.planning_area.str.contains("NA")]

        hdb_df.insert(1, 'lease_duration', 99)
        hdb_df.insert(1, 'type_of_sale', 'HDB Resale')
        try:
            hdb_df.insert(0, "transaction_year", None)
        except:
            print("year column already added")
        year_month_col = hdb_df["month"].str.split("-")
        hdb_df["transaction_year"] = year_month_col.str[0].astype(np.int64)
        hdb_df["month"] = year_month_col.str[1].astype(np.int64)
        # hdb_df.rename(columns{'month':'transaction_month'}, inplace=True)

        storey_cols = hdb_df["storey_range"].str.split(" ")
        hdb_df["floor_range_start"] = storey_cols.str[0].astype(np.int64)
        hdb_df["floor_range_end"] = storey_cols.str[2].astype(np.int64)
        hdb_df = hdb_df.drop('storey_range', axis=1)
        hdb_df['remaining_lease'] = hdb_df['remaining_lease'].apply(lambda x: self._convert_format(x))
        hdb_df['address'] = hdb_df['block'] + " " + hdb_df['street_name']
        hdb_df['project_name'] = hdb_df['address']
        # standardise column names
        hdb_df.rename(columns={'month': 'transaction_month', 'town': 'town_hdb', 'flat_type': 'property_type', 'street_name': 'street', 'floor_area_sqm': 'floor_area', 'lease_commence_date': 'lease_year', 'resale_price': 'price', 'planning_area': 'district_name'}, inplace=True)
        # define property_id from duplicated property-specific info
        
        hdb_df = hdb_df.drop(columns=['_id'])
        hdb_df.dropna(subset=['district_name', 'project_name'], inplace=True)
        return hdb_df


    def _convert_format(self, remaining_lease):
        """helper function to convert lease format

        Args:
            remaining_lease : xx years xx months

        Returns:
            string: xxYxxM
        """
        rl = remaining_lease.split()
        years = rl[0] + 'Y'
        if len(rl) > 2:
            months = rl[2] + 'M'
        else:
            months = '00M'
        return years + months


    ### URA Data Transformation Functions        
    # Flatten "Transaction" column from URA dataset
    def _unnest(self, df, col) -> pd.DataFrame:
        """flattern `transaction`, define project_id and property_id

        Args:
            df (DataFrame): combined URA data batches
            col (_type_): `Transaction`

        Returns:
            DataFrame: check project_id and property_id definition
        """
        col_flat = pd.DataFrame([[i, x] 
                           for i, y in df[col].items() 
                               for x in y], columns=['Property_index', col])
        col_flat = col_flat.set_index('Property_index')[col]
        col_flat_df = pd.DataFrame(list(col_flat), index = col_flat.index)
        df = df.drop(columns=[col])
        df = df.merge(col_flat_df, left_index=True, right_index=True)
        # autoincrement
        # df['project_id'] = df.groupby(['project']).ngroup()
        df.rename(columns={'planning_area': 'district_name'}, inplace=True)
        return df

    # Extract lease_year and lease_duration from "tenure" column in URA dataset
    def _extract_lease_year_and_duration(self, df, target_col):
        df_result = df.copy()

        # Extract lease_duration
        pattern = r'(\d+) yrs'
        # df_result['lease_duration'] = df_result[target_col].apply(lambda x: re.search(pattern, x).group(1) if re.search(pattern, x) else 9999).astype(int)
        df_result['lease_duration'] = df_result[target_col].apply(lambda x: re.search(pattern, x).group(1) if re.search(pattern, x) else "")
        df_result['lease_duration'] = df_result['lease_duration'].apply(lambda x: int(x) if x.isdigit() else pd.NA)
        
        # Extract lease_year
        pattern = r'from (\d+)'
        # df_result['lease_year'] = df_result[target_col].apply(lambda x: re.search(pattern, x).group(1) if re.search(pattern, x) else -1).astype(int)
        df_result['lease_year'] = df_result[target_col].apply(lambda x: re.search(pattern, x).group(1) if re.search(pattern, x) else "")
        df_result['lease_year'] = df_result['lease_year'].apply(lambda x: int(x) if x.isdigit() else pd.NA)

        # TODO for discussion set lease_year and lease_duration for 'Freehold' tenure
        # df_result[df_result['lease_duration'].isna()]['tenure'].unique()

        return df_result

    # Extract floor_range_start and floor_range_end from "floorRange" column in URA dataset
    def _extract_floor_range(self, df, target_col):
        def convert_basement_to_negative(floor_range_start, floor_range_end):
            floor_range_start = floor_range_start.str.replace('B', '-')
            floor_range_end = floor_range_end.str.replace('B', '-')
            return floor_range_start, floor_range_end
        df_result = df.copy()
        floor_range = df_result[target_col].str.split('-')
        try:
            floor_range_start = floor_range.str[0]
            floor_range_end = floor_range.str[1]
            floor_range_start, floor_range_end = convert_basement_to_negative(floor_range_start, floor_range_end)
        except:
            floor_range_start = pd.NA
            floor_range_end = pd.NA
        df_result['floor_range_start'] = floor_range_start
        df_result['floor_range_end'] = floor_range_end
        
        df_result['floor_range_start'] = pd.to_numeric(df_result['floor_range_start'], errors='coerce').astype('Int64')
        df_result['floor_range_end'] = pd.to_numeric(df_result['floor_range_end'], errors='coerce').astype('Int64')

        return df_result

    # Extract transaction_month and transaction_year function from "contractDate" column in URA dataset
    def _extract_transaction_month_and_year(self, df, target_col):
        df_result = df.copy()
        df_result['transaction_month'] = df_result[target_col].str.slice(0, 2).astype(int)
        df_result['transaction_year'] = 2000 + df_result[target_col].str.slice(-2).astype(int)
        return df_result

    # Replace values for typeOfSale column in URA dataset
    def _convert_type_of_sale(self, df, target_col):
        df_result = df.copy()
        df_result = df_result.replace({target_col: {'1': 'New sale', '2': 'Sub sale', '3': 'Resale'}})
        return df_result

    # Save URA dataset from dataframe to json format
    def _save_ura_dataset(self, df, file_path):
        df_dict = df.to_dict('records')
        json_data = json.dumps({'Result': df_dict})
        with open(file_path, 'w') as file:
            file.write(json_data)
        print("Save success: {file_path}".format(file_path=file_path))

    # URA Data transformation pipeline
    def URA_data_transformation_pipeline(self, file_path):
        """URA data transformation steps

        Args:
            folder (string path): folder to read data from 
            file_name (string): data file in input folder
            file_type (filetype): URA json files

        Returns:
            DataFrame: URA dataframe based on the db definition
        """
        ura_df_final = []
        with open(file_path, 'r') as file:
            # Load JSON data from the file
            try:
                data = json.load(file)['Result']
            except KeyError:
                data = json.load(data)
            ura_df_final.extend(data)            
        ura_df_final = pd.DataFrame(ura_df_final)
        # drop rows with NA long / lat / planning_area
        ura_df_final = ura_df_final[~ura_df_final.long.str.contains("NA")]
        ura_df_final = ura_df_final[~ura_df_final.lat.str.contains("NA")]
        ura_df_final = ura_df_final[~ura_df_final.planning_area.str.contains("NA")]
        # ura_df_final = remove_properties_without_latlong(file_name, ura_df, 'lat', 'long')
        ura_df_final = self._unnest(ura_df_final, "transaction")
        # ura_df_final = ura_df_final.drop(columns=["nettPrice"])
        ura_df_final = self._extract_lease_year_and_duration(ura_df_final, 'tenure')
        ura_df_final = self._extract_floor_range(ura_df_final, 'floorRange')
        ura_df_final = self._extract_transaction_month_and_year(ura_df_final, 'contractDate')
        ura_df_final = self._convert_type_of_sale(ura_df_final, 'typeOfSale')
        
        # naming and type of data according to db definition
        common_cols_dict = {
            # URA_col_name: common_col_name
            "area": "floor_area",
            "typeOfSale": "type_of_sale",
            "propertyType": "property_type",
            "project": "project_name",
            "street": "address"
        }
        ura_df_final = ura_df_final.rename(columns = common_cols_dict)

        dtype_dict = {'x': 'float', 
              'y': 'float', 
              'lat': 'float', 
              'long': 'float',
              'floor_area': 'float', 
              'noOfUnits': 'int', 
              'price': 'float', 
              'lease_year': 'Int32', 
              'lease_duration': 'Int32'
              }
        # Change data types for each column
        ura_df_final = ura_df_final.astype(dtype_dict)
        ura_df_final = ura_df_final.drop(columns='district')
        # rename street to address

        ura_df_final.dropna(subset=['district_name', 'project_name'], inplace=True)
        return ura_df_final

if __name__ == "__main__":
    kml = DataParser()
    # Execute Amenity data transformation pipeline
    
    # amenity_out_folder_path = './Amenity Data [Final]'
    amenity_out_folder_path = './Data'
    amenity_combined_df = kml.amenity_data_transformation_pipeline(amenity_out_folder_path)

    # Execute URA data transformation pipeline

    # URA_folder = './URA Data [Final]'
    URA_folder = './Data'

    URA_file_name = 'privatepropertypricesadded', 
                         
    URA_file_type = 'json'
    URA_combined_df = kml.URA_data_transformation_pipeline(URA_folder, URA_file_name, URA_file_type)
    URA_combined_df.to_csv('./Data/URA_combined_df.csv')
    # print(URA_combined_df.head())
    print(URA_combined_df.info())

    # Execute HDB data transformation pipeline
    hdb = kml.parse_hdb('./Data/hdb_resale_full.csv')
    hdb.to_csv('./Data/hdb_clean.csv')
    # print(hdb.head())
    print(hdb.info())
