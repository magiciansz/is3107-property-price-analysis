from bs4 import BeautifulSoup
import pandas as pd
import os
import numpy as np


class DataParser:
    def __init__(self):
        pass

    def parse_kml(self, filename) -> pd.DataFrame:
        """For hawkercenters, supermarkets, kindergartens, gyms, park facilities, Retailpharmacylocations
        These have <Point> child of <Placemark> element.
        For MRTLine, <LineString> child with start and end
        For parking lot, coordinates of edges

        Args:
            filename (string): kml file name

        Returns:
            pd.DataFrame: kml data parsed into dataframe with longitude latitude, usually altitude contains all 0
        """
        with open(filename, 'r') as f:
            s = BeautifulSoup(f, 'xml')
            placemarks = s.find_all(str("Placemark"))

            data_dict = {}
            for placemark in placemarks:
                # extract placemark name or id
                placemark_id = placemark.find('name').text if placemark.find('name') else placemark['id']
                data_dict[placemark_id] = {}
                # extract table dataa
                simple_data = placemark.find_all('SimpleData')
                for sd in simple_data:    
                    data_dict[placemark_id].update({sd['name']: sd.text})                
                if placemark.Point:
                    coor = placemark.find('Point').coordinates.text.split(',', 2)
                    # https://developers.google.com/kml/documentation/kml_tut
                    longitude, latitude, altitude = map(float, coor)                    
                    data_dict[placemark_id].update({'Longitude': longitude, 'Latitude': latitude, 'Altitude': altitude})
                
                elif placemark.LineString:
                    # start, end = placemark.LineString.coordinates.text.split(' ')
                    # some has more than 2 for a line
                    coor = placemark.find('LineString').coordinates.text
                    data_dict[placemark_id].update({'coordinates': coor})

                elif placemark.Polygon:
                    coor = placemark.find('Polygon').outerBoundaryIs.LinearRing.coordinates.text
                    data_dict[placemark_id].update({'coordinates': coor})
                
                else:
                    print('check kml schema')

            df = pd.DataFrame(data_dict).T.reset_index().rename(columns={'index': filename.split(".")[0]})

            # testing
            # print(df.head())
            # print(df['coordinates'].apply(len).nunique())

        print("Retrieve success: {filename}".format(filename = filename))
        return df


    def parse_carpark(self, filename):
        with open(filename, 'r') as f:
            s = BeautifulSoup(f, 'xml')
            placemarks = s.find_all(str("Placemark"))

            data_dict = {}
            for placemark in placemarks:
                placemark_id = placemark.find('name').text if placemark.find('name') else placemark['id']
                data_dict[placemark_id] = {}
                simple_data = placemark.find_all('SimpleData')
                for sd in simple_data:    
                    data_dict[placemark_id].update({sd['name']: sd.text})
                
                # Pentagon example is generated by drawing simple inner and outer shells and then extruding them down to the ground
                coor = placemark.find('Polygon').outerBoundaryIs.LinearRing.coordinates.text
                # TODO insert martin's code on finding middle pt
                    
            df = pd.DataFrame(data_dict).T.reset_index().rename(columns={'index': 'Parking Lot'})
            # testing
            print(df.head())

        return df
    

    def parse_hdb(self, file_path):
        """parse hdb resale data

        Args:
            file_path: hdb dataset file path

        Returns:
            dataframe: cleaned data with specified columns in db
        """
        hdb_df = pd.read_csv(file_path).drop("Unnamed: 0", axis=1, errors='ignore')
        try:
            hdb_df.insert(0, "transaction_year", None)
        except:
            print("year column already added")
        year_month_col = hdb_df["month"].str.split("-")
        hdb_df["transaction_year"] = year_month_col.str[0].astype(np.int64)
        hdb_df["month"] = year_month_col.str[1].astype(np.int64)
        hdb_df.rename(columns={'month':'transaction_month'}, inplace=True)

        storey_cols = hdb_df["storey_range"].str.split(" ")
        hdb_df["floor_range_start"] = storey_cols.str[0].astype(np.int64)
        hdb_df["floor_range_end"] = storey_cols.str[2].astype(np.int64)
        hdb_df = hdb_df.drop('storey_range', axis=1)

        hdb_df['remaining_lease'] = hdb_df['remaining_lease'].apply(lambda x: self._convert_format(x))
        hdb_df.insert(0, 'lease_duration', 99)


        hdb_df.columns = ['lease_duration', 'transaction_year', 'transaction_month', 'town_hdb_def', 'property_type', 'block', 'street', 'floor_area', 'flat_model', 'lease_year', 'remaining_lease', 'resale_price', 'address', 'lat', 'long', 'planning_area', 'floor_range_start', 'floor_range_end'] 
        # print(hdb_df.head())
        # print(hdb_df.info())

        return hdb_df
    

    def _convert_format(self, remaining_lease):
        """helper function to convert lease format

        Args:
            remaining_lease : xx years xx months

        Returns:
            string: xxYxxM
        """
        rl = remaining_lease.split()
        years = rl[0] + 'Y'
        if len(rl) > 2:
            months = rl[2] + 'M'
        else:
            months = '00M'
        return years + months


if __name__ == "__main__":
    kml = DataParser()
    ## Testing ##
    # hawker = kml.parse_kml('HawkerCentresKML.kml')
    # pharm = kml.parse_kml('RetailpharmacylocationsKML.kml')
    # mrtline = kml.parse_kml('MasterPlan2003MRTLine.kml')
    # parking = kml.parse_kml('URAParkingLotKML.kml')
    # hdb = kml.parse_hdb('ResaleflatpricesbasedonregistrationdatefromJan2017onwards.csv')
    hdb = kml.parse_hdb('./Data/hdb_resale_full.csv')
    print(hdb.head())
    print(hdb.info())
    

